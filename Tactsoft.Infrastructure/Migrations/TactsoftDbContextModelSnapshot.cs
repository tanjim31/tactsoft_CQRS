// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tactsoft.Infrastructure.AppContext;

#nullable disable

namespace Tactsoft.Infrastructure.Migrations
{
    [DbContext(typeof(TactsoftDbContext))]
    partial class TactsoftDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tactsoft.Domain.Entities.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 8, 15, 14, 40, 53, 221, DateTimeKind.Unspecified).AddTicks(375), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            Name = "Mohammadpur",
                            StateId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 8, 15, 14, 40, 53, 221, DateTimeKind.Unspecified).AddTicks(383), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            Name = "Dhanmondi",
                            StateId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 8, 15, 14, 40, 53, 221, DateTimeKind.Unspecified).AddTicks(385), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            Name = "Nator",
                            StateId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 8, 15, 14, 40, 53, 221, DateTimeKind.Unspecified).AddTicks(387), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            Name = "Sirajganj",
                            StateId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 8, 15, 14, 40, 53, 221, DateTimeKind.Unspecified).AddTicks(389), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            Name = "New York City",
                            StateId = 3L
                        },
                        new
                        {
                            Id = 6L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 8, 15, 14, 40, 53, 221, DateTimeKind.Unspecified).AddTicks(392), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            Name = "Buffalo",
                            StateId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 8, 15, 14, 40, 53, 221, DateTimeKind.Unspecified).AddTicks(394), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            Name = "Huntsville",
                            StateId = 4L
                        },
                        new
                        {
                            Id = 8L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 8, 15, 14, 40, 53, 221, DateTimeKind.Unspecified).AddTicks(396), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            Name = "Montgomery",
                            StateId = 4L
                        });
                });

            modelBuilder.Entity("Tactsoft.Domain.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "BD",
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 8, 15, 14, 40, 53, 221, DateTimeKind.Unspecified).AddTicks(5527), new TimeSpan(0, 0, 0, 0, 0)),
                            Currency = "BDT",
                            Flag = "bd",
                            IsDelete = false,
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = 2L,
                            Code = "USA",
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 8, 15, 14, 40, 53, 221, DateTimeKind.Unspecified).AddTicks(5529), new TimeSpan(0, 0, 0, 0, 0)),
                            Currency = "USD",
                            Flag = "us",
                            IsDelete = false,
                            Name = "United States"
                        },
                        new
                        {
                            Id = 3L,
                            Code = "UK",
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 8, 15, 14, 40, 53, 221, DateTimeKind.Unspecified).AddTicks(5532), new TimeSpan(0, 0, 0, 0, 0)),
                            Currency = "GBP",
                            Flag = "gb",
                            IsDelete = false,
                            Name = "United Kingdom"
                        });
                });

            modelBuilder.Entity("Tactsoft.Domain.Entities.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Bsc")
                        .HasColumnType("bit");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Hsc")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Msc")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Ssc")
                        .HasColumnType("bit");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("Employees", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "12/2, Dhanmondi, Dhaka",
                            Bsc = true,
                            CityId = 1L,
                            CountryId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 8, 15, 14, 40, 53, 222, DateTimeKind.Unspecified).AddTicks(962), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfBirth = new DateTime(1996, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sahadat@gmail.com",
                            FirstName = "Shahadat",
                            Gender = "Male",
                            Hsc = true,
                            IsDelete = false,
                            LastName = "Hassain",
                            Msc = false,
                            Phone = "017xxxxxxxxx",
                            Picture = "",
                            Ssc = true,
                            StateId = 1L,
                            ZipCode = "1234"
                        },
                        new
                        {
                            Id = 2L,
                            Address = "12/2, Dhanmondi, Dhaka",
                            Bsc = true,
                            CityId = 1L,
                            CountryId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 8, 15, 14, 40, 53, 222, DateTimeKind.Unspecified).AddTicks(967), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfBirth = new DateTime(1999, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mamun@gmail.com",
                            FirstName = "Mamun",
                            Gender = "Male",
                            Hsc = true,
                            IsDelete = false,
                            LastName = "Rahman",
                            Msc = false,
                            Phone = "017xxxxxxxxx",
                            Picture = "",
                            Ssc = true,
                            StateId = 1L,
                            ZipCode = "1234"
                        },
                        new
                        {
                            Id = 3L,
                            Address = "12/2, Dhanmondi, Dhaka",
                            Bsc = true,
                            CityId = 1L,
                            CountryId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 8, 15, 14, 40, 53, 222, DateTimeKind.Unspecified).AddTicks(970), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfBirth = new DateTime(1993, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "rahat@gmail.com",
                            FirstName = "Rahat",
                            Gender = "Male",
                            Hsc = true,
                            IsDelete = false,
                            LastName = "Hasan",
                            Msc = false,
                            Phone = "017xxxxxxxxx",
                            Picture = "",
                            Ssc = true,
                            StateId = 1L,
                            ZipCode = "1234"
                        },
                        new
                        {
                            Id = 4L,
                            Address = "12/2, Dhanmondi, Dhaka",
                            Bsc = true,
                            CityId = 1L,
                            CountryId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 8, 15, 14, 40, 53, 222, DateTimeKind.Unspecified).AddTicks(987), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfBirth = new DateTime(1996, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fara@gmail.com",
                            FirstName = "Fara",
                            Gender = "Female",
                            Hsc = true,
                            IsDelete = false,
                            LastName = "Khan",
                            Msc = false,
                            Phone = "017xxxxxxxxx",
                            Picture = "",
                            Ssc = true,
                            StateId = 1L,
                            ZipCode = "1234"
                        });
                });

            modelBuilder.Entity("Tactsoft.Domain.Entities.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CountryId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 8, 15, 14, 40, 53, 222, DateTimeKind.Unspecified).AddTicks(3946), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            Name = "Dhaka"
                        },
                        new
                        {
                            Id = 2L,
                            CountryId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 8, 15, 14, 40, 53, 222, DateTimeKind.Unspecified).AddTicks(3948), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            Name = "Rajshahi"
                        },
                        new
                        {
                            Id = 3L,
                            CountryId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 8, 15, 14, 40, 53, 222, DateTimeKind.Unspecified).AddTicks(3951), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            Name = "New York"
                        },
                        new
                        {
                            Id = 4L,
                            CountryId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 8, 15, 14, 40, 53, 222, DateTimeKind.Unspecified).AddTicks(3953), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            Name = "Alabama"
                        });
                });

            modelBuilder.Entity("Tactsoft.Domain.Entities.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Students", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "12/2, Dhanmondi, Dhaka",
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 8, 15, 14, 40, 53, 223, DateTimeKind.Unspecified).AddTicks(5609), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "sumon@gmail.com",
                            FirstName = "Sumon",
                            IsDelete = false,
                            LastName = "Mia",
                            Phone = "0171225588"
                        },
                        new
                        {
                            Id = 2L,
                            Address = "22/2, Mohammadpur, Dhaka",
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 8, 15, 14, 40, 53, 223, DateTimeKind.Unspecified).AddTicks(5613), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "rubel@gmail.com",
                            FirstName = "Rubel",
                            IsDelete = false,
                            LastName = "Hossain",
                            Phone = "01929121212"
                        },
                        new
                        {
                            Id = 3L,
                            Address = "12/2, Dhanmondi, Dhaka",
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 8, 15, 14, 40, 53, 223, DateTimeKind.Unspecified).AddTicks(5615), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "raju@gmail.com",
                            FirstName = "Raju",
                            IsDelete = false,
                            LastName = "Ahmed",
                            Phone = "0171225588"
                        },
                        new
                        {
                            Id = 4L,
                            Address = "12/2, Dhanmondi, Dhaka",
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2023, 8, 15, 14, 40, 53, 223, DateTimeKind.Unspecified).AddTicks(5617), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "mithu@gmail.com",
                            FirstName = "Mithu",
                            IsDelete = false,
                            LastName = "Mia",
                            Phone = "0171225588"
                        });
                });

            modelBuilder.Entity("Tactsoft.Domain.EntityLogs.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Tactsoft.Domain.Identities.IdentityModel+Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 0L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR",
                            StatusId = 0
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 0L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE",
                            StatusId = 0
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 0L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Trainer",
                            NormalizedName = "TRAINER",
                            StatusId = 0
                        },
                        new
                        {
                            Id = 4L,
                            CreatedBy = 0L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Student",
                            NormalizedName = "STUDENT",
                            StatusId = 0
                        });
                });

            modelBuilder.Entity("Tactsoft.Domain.Identities.IdentityModel+RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Tactsoft.Domain.Identities.IdentityModel+User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "733534be-bc62-4596-b050-044d2a6ab7c9",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDCboisIAVW5EzxEZVHVSOmVx86SQSEuZSchPLdGww+0fS0YaboJkf8eTEh2J0ef3g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "953179b6-40b6-470b-b401-d043816f48e3",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = 2L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d561e2c-2813-43cb-9f0a-c7679ce959a5",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "employee@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE@LOCALHOST.COM",
                            NormalizedUserName = "EMPLOYEE@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIkBIlDBKQDcwrVvs1SjX7InJSWbM5uwA0kAzv3pB9Yf9aA5SNrn8S8HrkHSq8YEtg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "da8fd043-7785-4229-99fa-9e6536de11bd",
                            TwoFactorEnabled = false,
                            UserName = "employee@localhost.com"
                        },
                        new
                        {
                            Id = 3L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "929713f3-8033-4365-be74-bb2ee64e5c0a",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "trainer@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TRAINER@LOCALHOST.COM",
                            NormalizedUserName = "TRAINER@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKIPmIoJX02fUC17VDmBD48HFgwF72RrgVnHwpl2xM/h5pMnUKbY6A7QsQICswsxqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1387afc3-cfbf-4676-a8a3-6585d4b05d25",
                            TwoFactorEnabled = false,
                            UserName = "trainer@localhost.com"
                        },
                        new
                        {
                            Id = 4L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73be8b5f-9c5a-4592-b65d-3365d6d557ad",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "student@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@LOCALHOST.COM",
                            NormalizedUserName = "STUDENT@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECLA1+v9OartCha5YjutmSdWnpSAVbHPk96yiccnPYQDQBUJEGTFf1XhD8b5E1DV2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f67870a4-abea-4355-b157-fb4ed6297b78",
                            TwoFactorEnabled = false,
                            UserName = "student@localhost.com"
                        });
                });

            modelBuilder.Entity("Tactsoft.Domain.Identities.IdentityModel+UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Tactsoft.Domain.Identities.IdentityModel+UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.HasIndex("UsersId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Tactsoft.Domain.Identities.IdentityModel+UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            RoleId = 1L
                        },
                        new
                        {
                            UserId = 2L,
                            RoleId = 2L
                        },
                        new
                        {
                            UserId = 3L,
                            RoleId = 3L
                        },
                        new
                        {
                            UserId = 4L,
                            RoleId = 4L
                        });
                });

            modelBuilder.Entity("Tactsoft.Domain.Identities.IdentityModel+UserToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Tactsoft.Domain.Entities.City", b =>
                {
                    b.HasOne("Tactsoft.Domain.Entities.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Tactsoft.Domain.Entities.Employee", b =>
                {
                    b.HasOne("Tactsoft.Domain.Entities.City", "City")
                        .WithMany("Employees")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Domain.Entities.Country", "Country")
                        .WithMany("Employees")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Domain.Entities.State", "State")
                        .WithMany("Employees")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Tactsoft.Domain.Entities.State", b =>
                {
                    b.HasOne("Tactsoft.Domain.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Tactsoft.Domain.Identities.IdentityModel+RoleClaim", b =>
                {
                    b.HasOne("Tactsoft.Domain.Identities.IdentityModel+Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tactsoft.Domain.Identities.IdentityModel+UserClaim", b =>
                {
                    b.HasOne("Tactsoft.Domain.Identities.IdentityModel+User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tactsoft.Domain.Identities.IdentityModel+UserLogin", b =>
                {
                    b.HasOne("Tactsoft.Domain.Identities.IdentityModel+User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Domain.Identities.IdentityModel+User", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Tactsoft.Domain.Identities.IdentityModel+UserRole", b =>
                {
                    b.HasOne("Tactsoft.Domain.Identities.IdentityModel+Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Domain.Identities.IdentityModel+User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tactsoft.Domain.Identities.IdentityModel+UserToken", b =>
                {
                    b.HasOne("Tactsoft.Domain.Identities.IdentityModel+User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tactsoft.Domain.Entities.City", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Tactsoft.Domain.Entities.Country", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("States");
                });

            modelBuilder.Entity("Tactsoft.Domain.Entities.State", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
